# IAI
Itemizing Artificial Intelligence:
A Project exploring learning in an inventory allotment scenario.
Gives an agent the opportunity to learn the best itemization schemes

Authors:
    Michael Chadbourne
    Tim Webber
    Mateo Freye

Last Edited: 12/13/15

TODO:
  * sage.py with a sage Class or Function inside
  * gameClass.py::refine(raw) : fill in or remove if the given class is suitable
  * gameClass.py::villianAdvance (TIM)
  * shopping.py - Rework? (MAT)
  * get it running
  * Algorithm Tweaking
  * * inside 'Sage'
  * * inside 'Wisdom'
  * * inside 'Shop'
  * * inside 'Game/Score'
  * * better items?
  * * better maps?
  * Coffee
  * Final README (and write-up? are we sure this is a thing) 
  * Success
  * Sleep

Files:
    * IAI.py:
    The Main-File for the project: Runs the testing suite and displays results.

    gameClass.py:
    contains the classes which represent the structure of the hunting 
    simulator. This is where the learning-agent gathers new information, and
    Tests the effectiveness of their current knowledge.

    items.py:
    contains the item classes as well as instantiations of the items which make
    up the item-store's catalog.
    
	mapClass.py:
	contains the class used to represent and generate maps; followed by 
	instantiations of the gameMap class, which are referenced by IAI when 
	generating the Game state.
	
	README:
    this
	
	sage.py:
	manipulates and returns the wisdom, based upon the score.
	(Could be build as a function in wisdomClass instead of a new file)
	
    shopping.py:
    contains the processes used in assigning a personal inventory from the stock
    available in the item-store. This is where the learning-agent applies it's
    knowledge.

    util.py:
    A small collection of custom mapping agents, and other helpful things
	used by other elements of the application.

    wiseClass.py:
    The class used in the creation and manipulation
    of a feature-based learning agent
    This is where the learning agent stores it's knowledge
	
DESIGN ELEMENTS:
    items.py contains item classes used by the shop, and in the hunting phase.
    followed by several instantiations of these items, as well as a store which
	are used by the shopping, wisdom, and game classes.

    shopping.py uses wisdom and a weight-limit to determine which items will
    be added to the inventory, and used in the next round of the hunting 
    simulation

    gameClass.py runs the hunting simulation, modifying the wisdom class found
    in wiseClass.py to learn from the experience. Uses an inventory passed
    from shopping.py, then passes the wisdom back to the shopper to test
    the new knowledge.
	
    IAI.py initiates the loop described above, and sets its duration. Returning
    the scores rendered during hunting simulations, illustrating improvement in
    the learning agents outcomes.
	
	AOE_functions: Given 'posPlayer' a (int, int) tuple representing the
      * position of the player and 'listofTargets' a list of posn tuples 
	  * representing the positions of the point of enemies, Returns a list of
      * all enemy positions (int, int) hit by the weapon. Position of first
      * impact is always in the returned list.
    
ALGORITHIM:
    # TODO